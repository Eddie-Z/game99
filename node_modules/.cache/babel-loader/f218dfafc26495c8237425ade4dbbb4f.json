{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { compareValues } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, drawInitialHandFromDeck } from './api';\nexport const useBoardGame = () => {\n  //states\n  const [{\n    cardImageUrl,\n    cardValue\n  }, setCardState] = useState({\n    cardValue: null,\n    cardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [result, setResult] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    drawInitialHandFromDeck();\n\n    const fetchCardandDeck = async () => {\n      const {\n        deckId,\n        value,\n        image\n      } = await createDeckAndDraw();\n      setCardState({\n        cardValue: value,\n        cardImageUrl: image\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []);\n\n  const onButtonClick = async event => {\n    const bet = event.target.name;\n    const {\n      value,\n      image\n    } = await drawCardFromDeck(deckId);\n    const result = compareValues({\n      previousCardValue: cardValue,\n      currentCardValue: value,\n      bet\n    });\n    setCardState({\n      cardImageUrl: image,\n      cardValue: value\n    });\n    setResult(result);\n  };\n\n  return {\n    cardImageUrl,\n    onButtonClick,\n    result\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","compareValues","createDeckAndDraw","drawCardFromDeck","drawInitialHandFromDeck","useBoardGame","cardImageUrl","cardValue","setCardState","deckId","setDeckId","result","setResult","fetchCardandDeck","value","image","onButtonClick","event","bet","target","name","previousCardValue","currentCardValue"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,EAA6CC,uBAA7C,QAA2E,OAA3E;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAE9B;AACA,QAAM,CAAC;AAACC,IAAAA,YAAD;AAAcC,IAAAA;AAAd,GAAD,EAA2BC,YAA3B,IAA2CR,QAAQ,CAAC;AACtDO,IAAAA,SAAS,EAAC,IAD4C;AAEtDD,IAAAA,YAAY,EAAC;AAFyC,GAAD,CAAzD;AAIA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,MAAD,EAAQC,SAAR,IAAmBZ,QAAQ,CAAC,IAAD,CAAjC,CAR8B,CAU9B;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACVK,IAAAA,uBAAuB;;AACvB,UAAMS,gBAAgB,GAAG,YAAW;AAChC,YAAM;AAACJ,QAAAA,MAAD;AAASK,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,UAAyB,MAAMb,iBAAiB,EAAtD;AACAM,MAAAA,YAAY,CAAC;AACTD,QAAAA,SAAS,EAACO,KADD;AAETR,QAAAA,YAAY,EAACS;AAFJ,OAAD,CAAZ;AAIAL,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KAPD;;AAQAI,IAAAA,gBAAgB;AACnB,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMG,aAAa,GAAG,MAAOC,KAAP,IAAgB;AAClC,UAAMC,GAAG,GAACD,KAAK,CAACE,MAAN,CAAaC,IAAvB;AACA,UAAM;AAACN,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAgB,MAAMZ,gBAAgB,CAACM,MAAD,CAA5C;AAGA,UAAME,MAAM,GAAGV,aAAa,CAAC;AACzBoB,MAAAA,iBAAiB,EAAEd,SADM;AAEzBe,MAAAA,gBAAgB,EAAER,KAFO;AAGzBI,MAAAA;AAHyB,KAAD,CAA5B;AAMAV,IAAAA,YAAY,CAAC;AACTF,MAAAA,YAAY,EAACS,KADJ;AAETR,MAAAA,SAAS,EAACO;AAFD,KAAD,CAAZ;AAKAF,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GAjBD;;AAkBA,SAAO;AACHL,IAAAA,YADG;AAEHU,IAAAA,aAFG;AAGHL,IAAAA;AAHG,GAAP;AAKH,CA/CM","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { compareValues } from './utils'\nimport {createDeckAndDraw, drawCardFromDeck, drawInitialHandFromDeck} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    const [{cardImageUrl,cardValue}, setCardState] = useState({\n        cardValue:null,\n        cardImageUrl:null\n    })\n    const [deckId, setDeckId]=useState(null)\n    const [result,setResult]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        drawInitialHandFromDeck();\n        const fetchCardandDeck = async () =>{\n            const {deckId, value, image} = await createDeckAndDraw();\n            setCardState({\n                cardValue:value,\n                cardImageUrl:image\n            })\n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n    const onButtonClick = async (event) =>{\n        const bet=event.target.name\n        const {value,image} = await drawCardFromDeck(deckId);\n    \n        \n        const result = compareValues({\n            previousCardValue: cardValue,\n            currentCardValue: value,\n            bet\n        })\n \n        setCardState({\n            cardImageUrl:image,\n            cardValue:value\n        })\n        \n        setResult(result)\n    }\n    return {\n        cardImageUrl,\n        onButtonClick,\n        result\n    }\n}"]},"metadata":{},"sourceType":"module"}