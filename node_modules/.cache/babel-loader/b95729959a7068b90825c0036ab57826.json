{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { compareValues } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck } from './api';\nexport const useBoardGame = () => {\n  //states\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw();\n      console.log({\n        deckId,\n        cardsArray\n      }); //convert object to array of values\n\n      const cards = cardsArray.map(obj => {\n        return obj.value;\n      }); //convert object to array of images\n\n      const images = cardsArray.map(obj => {\n        return obj.image;\n      });\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []); // const onButtonClick = async (event) =>{\n  //     const bet=event.target.name\n  //     const {value,image} = await drawCardFromDeck(deckId);\n  //     const result = compareValues({\n  //         previousCardValue: cardValue,\n  //         currentCardValue: value,\n  //         bet\n  //     })\n  //     setCardState({\n  //         cardImageUrl:image,\n  //         cardValue:value\n  //     })\n  //     setResult(result)\n  // }\n\n  const onCardClick = event => {\n    let srcImgCard = event.target.src;\n    let pos = cardImageUrl.indexOf(srcImgCard);\n    let selectedCardValue = cardInHand[pos];\n    let updatedScore = Number(score) + Number(selectedCardValue);\n\n    if (turn) {\n      //update score\n      setScore(updatedScore); //remove card from objects\n\n      setCardState({\n        cardInHand: cardInHand.filter(item => item != selectedCardValue),\n        cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n      });\n      setTurn(!turn);\n    }\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //onButtonClick,\n    onCardClick,\n    result\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","compareValues","createDeckAndDraw","drawCardFromDeck","useBoardGame","cardImageUrl","cardInHand","setCardState","deckId","setDeckId","result","setResult","score","setScore","turn","setTurn","fetchCardandDeck","cardsArray","console","log","cards","map","obj","value","images","image","onCardClick","event","srcImgCard","target","src","pos","indexOf","selectedCardValue","updatedScore","Number","filter","item"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,OAAlD;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAE9B;AACA,QAAM,CAAC;AAACC,IAAAA,YAAD;AAAcC,IAAAA;AAAd,GAAD,EAA4BC,YAA5B,IAA4CP,QAAQ,CAAC;AACvDM,IAAAA,UAAU,EAAC,IAD4C;AAEvDD,IAAAA,YAAY,EAAC;AAF0C,GAAD,CAA1D;AAIA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,MAAD,EAAQC,SAAR,IAAmBX,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACY,KAAD,EAAOC,QAAP,IAAiBb,QAAQ,CAAC,IAAD,CAA/B,CAT8B,CAW9B;;AACA,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAef,QAAQ,CAAC,IAAD,CAA7B,CAZ8B,CAc9B;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMiB,gBAAgB,GAAG,YAAW;AAChC,YAAM;AAACR,QAAAA,MAAD;AAAQS,QAAAA;AAAR,UAAsB,MAAMf,iBAAiB,EAAnD;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACX,QAAAA,MAAD;AAAQS,QAAAA;AAAR,OAAZ,EAFgC,CAIhC;;AACC,YAAMG,KAAK,GAAGH,UAAU,CAACI,GAAX,CAAeC,GAAG,IAAI;AAChC,eAAOA,GAAG,CAACC,KAAX;AACH,OAFa,CAAd,CAL+B,CAS/B;;AACA,YAAMC,MAAM,GAAGP,UAAU,CAACI,GAAX,CAAeC,GAAG,IAAI;AAClC,eAAOA,GAAG,CAACG,KAAX;AACH,OAFe,CAAf;AAIDlB,MAAAA,YAAY,CAAC;AACTD,QAAAA,UAAU,EAACc,KADF;AAETf,QAAAA,YAAY,EAACmB;AAFJ,OAAD,CAAZ;AAIAf,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KAnBD;;AAoBAQ,IAAAA,gBAAgB;AACnB,GAtBQ,EAsBP,EAtBO,CAAT,CAf8B,CAuC9B;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA,QAAMU,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,GAA9B;AACA,QAAIC,GAAG,GAAG1B,YAAY,CAAC2B,OAAb,CAAqBJ,UAArB,CAAV;AACA,QAAIK,iBAAiB,GAAG3B,UAAU,CAACyB,GAAD,CAAlC;AAEA,QAAIG,YAAY,GAAGC,MAAM,CAACvB,KAAD,CAAN,GAAcuB,MAAM,CAACF,iBAAD,CAAvC;;AAEA,QAAGnB,IAAH,EACA;AACQ;AACJD,MAAAA,QAAQ,CAACqB,YAAD,CAAR,CAFJ,CAII;;AACA3B,MAAAA,YAAY,CAAC;AACTD,QAAAA,UAAU,EAACA,UAAU,CAAC8B,MAAX,CAAkBC,IAAI,IAAIA,IAAI,IAAEJ,iBAAhC,CADF;AAET5B,QAAAA,YAAY,EAACA,YAAY,CAAC+B,MAAb,CAAoBC,IAAI,IAAIA,IAAI,IAAET,UAAlC;AAFJ,OAAD,CAAZ;AAIAb,MAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACH;AAEJ,GApBD;;AAsBA,SAAO;AACHF,IAAAA,KADG;AAEHP,IAAAA,YAFG;AAGH;AACAqB,IAAAA,WAJG;AAKHhB,IAAAA;AALG,GAAP;AAOH,CAvFM","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { compareValues } from './utils'\nimport {createDeckAndDraw, drawCardFromDeck} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n    const [deckId, setDeckId]=useState(null)\n    const [result,setResult]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n            const {deckId,cardsArray} = await createDeckAndDraw();\n            console.log({deckId,cardsArray})\n\n            //convert object to array of values\n             const cards = cardsArray.map(obj => {\n                 return obj.value\n             })\n\n             //convert object to array of images\n             const images = cardsArray.map(obj => {\n                return obj.image\n            })\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n    // const onButtonClick = async (event) =>{\n    //     const bet=event.target.name\n    //     const {value,image} = await drawCardFromDeck(deckId);\n    \n        \n    //     const result = compareValues({\n    //         previousCardValue: cardValue,\n    //         currentCardValue: value,\n    //         bet\n    //     })\n \n    //     setCardState({\n    //         cardImageUrl:image,\n    //         cardValue:value\n    //     })\n        \n    //     setResult(result)\n    // }\n\n    const onCardClick = (event) => {\n        let srcImgCard = event.target.src\n        let pos = cardImageUrl.indexOf(srcImgCard)\n        let selectedCardValue = cardInHand[pos]\n\n        let updatedScore = Number(score)+Number(selectedCardValue)\n\n        if(turn)\n        {\n                //update score\n            setScore(updatedScore)\n\n            //remove card from objects\n            setCardState({\n                cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n                cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            })\n            setTurn(!turn)\n        }\n      \n    }\n\n    return {\n        score,\n        cardImageUrl,\n        //onButtonClick,\n        onCardClick,\n        result\n    }\n}"]},"metadata":{},"sourceType":"module"}