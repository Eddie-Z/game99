{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { cardsObjToArray, imagesObjToArray, handleSpecial } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, drawFromDeck_2 } from './api';\nexport const useBoardGame = () => {\n  //states\n  //player1\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  }); //AI\n\n  const [{\n    AIcardImageUrl,\n    AIcardInHand\n  }, AIsetCardState] = useState({\n    AIcardInHand: null,\n    AIcardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true);\n  const [winner, setWinner] = useState(); //handle ace \n\n  const [ace, setAce] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      //draw 5 cards\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw(); //draw 5 cards for AI\n\n      const {\n        cardsArray: AIcardsArray\n      } = await drawFromDeck_2(deckId); //convert object to array of values\n\n      const cards = cardsObjToArray(cardsArray);\n      const images = imagesObjToArray(cardsArray); //AI convert object to array of values\n\n      const AIcards = cardsObjToArray(AIcardsArray);\n      const AIimages = cardsObjToArray(AIcardsArray);\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      });\n      AIsetCardState({\n        AIcardInHand: AIcards,\n        AIcardImageUrl_2: AIimages\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []);\n  useEffect(() => {\n    const fetchNewCard = async () => {\n      const {\n        value,\n        image\n      } = await drawCardFromDeck(deckId);\n      setCardState({\n        cardInHand: [...cardInHand, value],\n        cardImageUrl: [...cardImageUrl, image]\n      });\n    };\n\n    const fetchNewCard2 = async () => {\n      const {\n        value,\n        image\n      } = await drawCardFromDeck(deckId);\n      AIsetCardState({\n        AIcardInHand: [...cardInHand, value],\n        AIcardImageUrl: [...cardImageUrl, image]\n      });\n    };\n\n    if (turn) {\n      fetchNewCard();\n    } else {\n      fetchNewCard2();\n      console.log(AIcardInHand); //fetchNewCard2();\n    }\n  }, [turn]);\n\n  const onCardClick = event => {\n    if (turn) {\n      let srcImgCard = event.target.src;\n      let pos = cardImageUrl.indexOf(srcImgCard);\n      let selectedCardValue = cardInHand[pos];\n      selectedCardValue = handleSpecial(selectedCardValue, score, turn);\n      let updatedScore = Number(score) + Number(selectedCardValue);\n\n      if (updatedScore > 99) {\n        alert(\"Winner Player 1 Refresh Game\");\n      } //update score\n\n\n      setScore(updatedScore); //remove card from objects\n\n      setCardState({\n        cardInHand: cardInHand.filter(item => item != selectedCardValue),\n        cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n      }); //change turn\n\n      setTurn(!turn);\n    }\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //cardImageUrl_2,\n    //onButtonClick,\n    onCardClick,\n    turn,\n    winner\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","cardsObjToArray","imagesObjToArray","handleSpecial","createDeckAndDraw","drawCardFromDeck","drawFromDeck_2","useBoardGame","cardImageUrl","cardInHand","setCardState","AIcardImageUrl","AIcardInHand","AIsetCardState","deckId","setDeckId","score","setScore","turn","setTurn","winner","setWinner","ace","setAce","fetchCardandDeck","cardsArray","AIcardsArray","cards","images","AIcards","AIimages","AIcardImageUrl_2","fetchNewCard","value","image","fetchNewCard2","console","log","onCardClick","event","srcImgCard","target","src","pos","indexOf","selectedCardValue","updatedScore","Number","alert","filter","item"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { cardsObjToArray, imagesObjToArray, handleSpecial} from './utils'\nimport {createDeckAndDraw, drawCardFromDeck,drawFromDeck_2} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    //player1\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n     //AI\n    const [{AIcardImageUrl,AIcardInHand}, AIsetCardState] = useState({\n        AIcardInHand:null,\n        AIcardImageUrl:null\n    })\n\n    const [deckId, setDeckId]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n    const [winner,setWinner]=useState()\n\n    //handle ace \n    const [ace,setAce]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n\n            //draw 5 cards\n            const {deckId,cardsArray} = await createDeckAndDraw();\n\n            //draw 5 cards for AI\n             const {cardsArray:AIcardsArray} = await drawFromDeck_2(deckId);\n         \n               //convert object to array of values\n             const cards =  cardsObjToArray(cardsArray)\n             const images = imagesObjToArray(cardsArray)\n\n             //AI convert object to array of values\n             const AIcards =  cardsObjToArray(AIcardsArray)\n             const AIimages =  cardsObjToArray(AIcardsArray)\n\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            AIsetCardState({\n                AIcardInHand:AIcards,\n                AIcardImageUrl_2:AIimages\n            })\n    \n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n    useEffect(()=>{\n\n            const fetchNewCard = async () =>{\n                const {value,image} = await drawCardFromDeck(deckId);\n                setCardState({\n                    cardInHand:[...cardInHand,value],\n                    cardImageUrl:[...cardImageUrl,image]\n                })\n            }\n            const fetchNewCard2 = async () =>{\n                const {value,image} = await drawCardFromDeck(deckId);\n                AIsetCardState({\n                    AIcardInHand:[...cardInHand,value],\n                    AIcardImageUrl:[...cardImageUrl,image]\n                })\n              \n            }\n            if(turn){\n                fetchNewCard();\n            }\n             else{\n                fetchNewCard2();\n                 console.log(AIcardInHand);\n\n                //fetchNewCard2();\n             }\n            \n    },[turn])\n\n \n\n    const onCardClick = (event) => {\n        if(turn)\n        {\n            let srcImgCard = event.target.src\n            let pos = cardImageUrl.indexOf(srcImgCard)\n            let selectedCardValue = cardInHand[pos]\n\n            selectedCardValue = handleSpecial(selectedCardValue,score,turn)\n\n            let updatedScore = Number(score)+Number(selectedCardValue)\n    \n            if (updatedScore > 99){\n               alert(\"Winner Player 1 Refresh Game\")\n            }\n                //update score\n            setScore(updatedScore)\n\n            //remove card from objects\n            setCardState({\n                cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n                cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            })\n\n            //change turn\n            setTurn(!turn)\n        }\n    }\n    \n\n    return {\n        score,\n        cardImageUrl,\n        //cardImageUrl_2,\n        //onButtonClick,\n        onCardClick,\n        turn,\n        winner,\n    }\n}"]},"metadata":{},"sourceType":"module"}