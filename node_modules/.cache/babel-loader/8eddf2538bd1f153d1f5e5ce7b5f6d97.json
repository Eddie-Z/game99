{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { cardsObjToArray, imagesObjToArray, handleSpecial } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, AIDrawCards } from './api';\nexport const useBoardGame = () => {\n  //states\n  //player1\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  }); //AI\n\n  const [{\n    AIcardImageUrl,\n    AIcardInHand\n  }, AIsetCardState] = useState({\n    AIcardInHand: null,\n    AIcardImageUrl: null\n  });\n  const [AISelected, setAISelected] = useState(null);\n  const [deckId, setDeckId] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true);\n  const [winner, setWinner] = useState(); //handle ace \n\n  const [ace, setAce] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const drawCards = async () => {\n      const cardDraw = await drawCardFromDeck(deckId);\n      const AIdraw = await drawCardFromDeck(deckId);\n      console.log(cardDraw);\n      console.log(cardInHand);\n      console.log(cardImageUrl);\n      AIsetCardState(prevState => {\n        let newState = { ...prevState\n        };\n        newState.AIcardInHand = [...newState.AIcardInHand, AIdraw];\n        newState.AIcardImageUrl = [...newState.AIcardImageUrl, AIdraw[2]];\n        return newState;\n      });\n      setCardState(prevState => {\n        let newState = { ...prevState\n        };\n        newState.cardInHand = [...newState.cardInHand, cardDraw];\n        newState.cardImageUrl = [...newState.cardImageUrl, cardDraw[2]];\n        return newState;\n      });\n    }; //AI turn\n\n\n    if (!turn) {\n      console.log(\"Change Turns\");\n      drawCards(); //select first card\n\n      let initialSelectedCardValue = AIcardInHand[0]; //handle secpail values\n\n      let selectedCardValue = handleSpecial(initialSelectedCardValue[0], score, turn);\n      setAISelected(initialSelectedCardValue[0]);\n      console.log(\"ai selected\", selectedCardValue); //update score\n\n      setScore(prevState => {\n        let newState = prevState + Number(selectedCardValue);\n\n        if (newState > 99) {\n          alert(\"Human player has won! Restart browser\");\n        }\n\n        return newState;\n      });\n      AIsetCardState(prevState => {\n        let newState = { ...prevState\n        };\n        newState.AIcardInHand = newState.AIcardInHand.filter(item => item[0] != initialSelectedCardValue && item[2] != initialSelectedCardValue[2]);\n        newState.AIcardImageUrl = newState.AIcardImageUrl.filter(item => item != AIcardImageUrl[0]);\n        console.log(newState);\n        return newState;\n      });\n      setTurn(!turn);\n    }\n  }, [turn]);\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      //draw 5 cards\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw(); //draw 5 cards for AI\n\n      const {\n        cardsArray: AIcardsArray\n      } = await AIDrawCards(deckId); //convert object to array of values\n\n      const cards = cardsObjToArray(cardsArray);\n      const images = imagesObjToArray(cardsArray); //AI convert object to array of values\n\n      const AIcards = cardsObjToArray(AIcardsArray);\n      const AIimages = imagesObjToArray(AIcardsArray);\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      });\n      AIsetCardState({\n        AIcardInHand: AIcards,\n        AIcardImageUrl: AIimages\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []); // const update = (selectedCardValue,srcImgCard) =>{\n  //     setCardState({\n  //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n  //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n  //     })\n  // }\n\n  const onCardClick = event => {\n    event.preventDefault();\n\n    if (turn) {\n      let srcImgCard = event.target.src;\n      let pos = cardImageUrl.indexOf(srcImgCard);\n      let initialSelectedCardValue = cardInHand[pos];\n      console.log(cardInHand);\n      console.log(cardImageUrl);\n      console.log(\"you've selected \", initialSelectedCardValue);\n      let selectedCardValue = handleSpecial(initialSelectedCardValue[0], score, turn);\n      console.log(\"actual value is \", selectedCardValue);\n      setScore(prevState => {\n        let newState = prevState + Number(selectedCardValue);\n\n        if (newState > 99) {\n          alert(\"Other player has won! Restart browser\");\n        }\n\n        return newState;\n      }); //remove card from objects\n\n      setCardState(prevState => {\n        let newState = { ...prevState\n        }; // console.log(newState.cardInHand.splice(pos,1))\n        //console.log(newState.cardInHand)\n        //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n\n        newState.cardInHand = newState.cardInHand.filter(item => item[0] != initialSelectedCardValue && item[2] != initialSelectedCardValue[2]);\n        newState.cardImageUrl = newState.cardImageUrl.filter(item => item != srcImgCard);\n        console.log(newState);\n        return newState;\n      }); // setCardState({\n      //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n      //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n      // })\n      //change turn\n\n      setTurn(!turn);\n    }\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //cardImageUrl_2,\n    //onButtonClick,\n    AISelected,\n    onCardClick,\n    turn,\n    winner\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","cardsObjToArray","imagesObjToArray","handleSpecial","createDeckAndDraw","drawCardFromDeck","AIDrawCards","useBoardGame","cardImageUrl","cardInHand","setCardState","AIcardImageUrl","AIcardInHand","AIsetCardState","AISelected","setAISelected","deckId","setDeckId","score","setScore","turn","setTurn","winner","setWinner","ace","setAce","drawCards","cardDraw","AIdraw","console","log","prevState","newState","initialSelectedCardValue","selectedCardValue","Number","alert","filter","item","fetchCardandDeck","cardsArray","AIcardsArray","cards","images","AIcards","AIimages","onCardClick","event","preventDefault","srcImgCard","target","src","pos","indexOf"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { cardsObjToArray, imagesObjToArray, handleSpecial} from './utils'\nimport {createDeckAndDraw, drawCardFromDeck,AIDrawCards} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    //player1\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n     //AI\n    const [{AIcardImageUrl,AIcardInHand}, AIsetCardState] = useState({\n        AIcardInHand:null,\n        AIcardImageUrl:null\n    })\n\n    const [AISelected,setAISelected] = useState(null)\n\n    const [deckId, setDeckId]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n    const [winner,setWinner]=useState()\n\n    //handle ace \n    const [ace,setAce]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n\n    useEffect(()=>{\n\n        const drawCards = async ()=> {\n            const cardDraw= await drawCardFromDeck(deckId)\n            const AIdraw=await drawCardFromDeck(deckId)\n            console.log(cardDraw)\n            console.log(cardInHand)\n            console.log(cardImageUrl)\n\n          \n            AIsetCardState(prevState => {\n                let newState = {...prevState}\n                newState.AIcardInHand=[...newState.AIcardInHand,AIdraw]\n                newState.AIcardImageUrl=[...newState.AIcardImageUrl,AIdraw[2]]\n                return newState\n            }\n            )\n\n            setCardState(prevState => {\n                let newState = {...prevState}\n                newState.cardInHand=[...newState.cardInHand,cardDraw]\n                newState.cardImageUrl=[...newState.cardImageUrl,cardDraw[2]]\n                return newState\n            }\n            )\n        }\n       \n        //AI turn\n        if(!turn){\n            console.log(\"Change Turns\")\n            drawCards()\n            //select first card\n            let initialSelectedCardValue = AIcardInHand[0]\n            //handle secpail values\n            let selectedCardValue = handleSpecial(initialSelectedCardValue[0],score,turn)\n            setAISelected(initialSelectedCardValue[0]);\n            console.log(\"ai selected\",selectedCardValue)\n            //update score\n            setScore(prevState => {\n                let newState = prevState + Number(selectedCardValue)\n                if(newState>99){\n                    alert(\"Human player has won! Restart browser\")\n                }\n                return newState;\n            })\n\n            AIsetCardState(prevState => {\n                let newState = {...prevState}\n\n                newState.AIcardInHand=newState.AIcardInHand.filter(item => item[0]!=initialSelectedCardValue && item[2]!=initialSelectedCardValue[2])\n                newState.AIcardImageUrl=newState.AIcardImageUrl.filter(item => item!=AIcardImageUrl[0])\n                console.log(newState)\n                return newState\n            }\n            )\n\n\n            setTurn(!turn)\n        }\n        \n    },[turn])\n\n\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n\n            //draw 5 cards\n            const {deckId,cardsArray} = await createDeckAndDraw();\n\n            //draw 5 cards for AI\n            const {cardsArray:AIcardsArray} = await AIDrawCards(deckId);\n         \n               //convert object to array of values\n             const cards =  cardsObjToArray(cardsArray)\n             const images = imagesObjToArray(cardsArray)\n\n\n             //AI convert object to array of values\n             const AIcards =  cardsObjToArray(AIcardsArray)\n             const AIimages =  imagesObjToArray(AIcardsArray)\n\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            AIsetCardState({\n                AIcardInHand:AIcards,\n                AIcardImageUrl:AIimages\n            })\n    \n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n \n    // const update = (selectedCardValue,srcImgCard) =>{\n    //     setCardState({\n    //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n    //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n    //     })\n    // }\n\n    const onCardClick = (event) => {\n        event.preventDefault();\n        if(turn)\n        {\n            let srcImgCard = event.target.src\n            let pos = cardImageUrl.indexOf(srcImgCard)\n            let initialSelectedCardValue = cardInHand[pos]\n    \n            console.log(cardInHand)\n            console.log(cardImageUrl)\n            console.log(\"you've selected \",initialSelectedCardValue)\n\n            let selectedCardValue = handleSpecial(initialSelectedCardValue[0],score,turn)\n            console.log(\"actual value is \",selectedCardValue)\n\n\n            setScore(prevState => {\n                let newState = prevState + Number(selectedCardValue)\n                if(newState>99){\n                    alert(\"Other player has won! Restart browser\")\n                }\n                return newState;\n            })\n        \n\n            //remove card from objects\n\n            setCardState(prevState => {\n                let newState = {...prevState}\n               // console.log(newState.cardInHand.splice(pos,1))\n                //console.log(newState.cardInHand)\n                //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n                newState.cardInHand=newState.cardInHand.filter(item => item[0]!=initialSelectedCardValue && item[2]!=initialSelectedCardValue[2])\n                newState.cardImageUrl=newState.cardImageUrl.filter(item => item!=srcImgCard)\n                console.log(newState)\n                return newState\n            }\n            )\n\n            \n            // setCardState({\n            //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n            //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            // })\n            //change turn\n            setTurn(!turn)\n        }\n    }\n    \n\n    return {\n        score,\n        cardImageUrl,\n        //cardImageUrl_2,\n        //onButtonClick,\n        AISelected,\n        onCardClick,\n        turn,\n        winner,\n    }\n}"]},"metadata":{},"sourceType":"module"}