{"ast":null,"code":"const cardValues = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'ACE', 'JACK', 'QUEEN', 'KING']; //handle special cards\n\nconst handleAce = () => {\n  const aceValue = prompt(\"Please enter your ace value from 1-11\", \"1\");\n  return aceValue;\n};\n\nexport const handleSpecial = (selectedCardValue, score, turn) => {\n  if (selectedCardValue == '4') {\n    // setCardState({\n    //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n    //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n    // })\n    //setTurn(!turn)\n    return 0;\n  } else if (selectedCardValue == '9') {\n    // setCardState({\n    //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n    //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n    // })\n    // setTurn(!turn)\n    return 0;\n  } else if (selectedCardValue == '10') {\n    return selectedCardValue = -10;\n  } else if (selectedCardValue == 'KING') {\n    return selectedCardValue = 99 - Number(score);\n  } else if (selectedCardValue == 'QUEEN') {\n    return selectedCardValue = 12;\n  } else if (selectedCardValue == 'JACK') {\n    return selectedCardValue = 11;\n  } else if (selectedCardValue == 'ACE') {\n    return selectedCardValue = handleAce();\n  } else {\n    return selectedCardValue;\n  }\n}; //convert object to array of values\n\nexport const cardsObjToArray = cardsArray => {\n  return cardsArray.map(obj => {\n    //console.log(obj[0])\n    return [obj[0], obj[1]]; //return obj.value\n  });\n}; //convert object to array of images\n\nexport const imagesObjToArray = imagesArray => {\n  return imagesArray.map(obj => {\n    return obj[2]; // return obj.image\n  });\n};\nexport const compareValues = ({\n  previousCardValue,\n  currentCardValue,\n  bet\n}) => {\n  const previousCardValueIndex = cardValues.indexOf(previousCardValue);\n  const currentCardValueIndex = cardValues.indexOf(currentCardValue);\n\n  if (previousCardValueIndex === -1 || currentCardValueIndex == 1) {\n    throw new Error('Not found');\n  }\n\n  if (bet === \"up\" && previousCardValueIndex >= currentCardValueIndex) {\n    return \"lose\";\n  }\n\n  if (bet === \"up\" && previousCardValueIndex < currentCardValueIndex) {\n    return \"win\";\n  }\n\n  if (bet === \"down\" && previousCardValueIndex <= currentCardValueIndex) {\n    return \"lose\";\n  }\n\n  if (bet === \"down\" && previousCardValueIndex > currentCardValueIndex) {\n    return \"win\";\n  }\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/utils.js"],"names":["cardValues","handleAce","aceValue","prompt","handleSpecial","selectedCardValue","score","turn","Number","cardsObjToArray","cardsArray","map","obj","imagesObjToArray","imagesArray","compareValues","previousCardValue","currentCardValue","bet","previousCardValueIndex","indexOf","currentCardValueIndex","Error"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CACf,GADe,EAEf,GAFe,EAGf,GAHe,EAIf,GAJe,EAKf,GALe,EAMf,GANe,EAOf,GAPe,EAQf,GARe,EASf,IATe,EAUf,KAVe,EAWf,MAXe,EAYf,OAZe,EAaf,MAbe,CAAnB,C,CAgBA;;AAEA,MAAMC,SAAS,GAAG,MAAK;AACnB,QAAMC,QAAQ,GAAGC,MAAM,CAAC,uCAAD,EAA0C,GAA1C,CAAvB;AACA,SAAOD,QAAP;AACH,CAHD;;AAKA,OAAO,MAAME,aAAa,GAAG,CAACC,iBAAD,EAAmBC,KAAnB,EAAyBC,IAAzB,KAAkC;AAC3D,MAAGF,iBAAiB,IAAE,GAAtB,EAA0B;AACtB;AACA;AACA;AACA;AACA;AACA,WAAO,CAAP;AACH,GAPD,MAQK,IAAGA,iBAAiB,IAAE,GAAtB,EAA0B;AAC3B;AACA;AACA;AACA;AACD;AACC,WAAO,CAAP;AACH,GAPI,MAQA,IAAGA,iBAAiB,IAAE,IAAtB,EAA2B;AAC5B,WAAOA,iBAAiB,GAAC,CAAC,EAA1B;AACH,GAFI,MAGA,IAAGA,iBAAiB,IAAE,MAAtB,EAA6B;AAC7B,WAAOA,iBAAiB,GAAC,KAAGG,MAAM,CAACF,KAAD,CAAlC;AACJ,GAFI,MAGA,IAAGD,iBAAiB,IAAE,OAAtB,EAA8B;AAC/B,WAAOA,iBAAiB,GAAC,EAAzB;AACH,GAFI,MAGA,IAAGA,iBAAiB,IAAE,MAAtB,EAA6B;AAC9B,WAAOA,iBAAiB,GAAC,EAAzB;AACH,GAFI,MAGA,IAAGA,iBAAiB,IAAE,KAAtB,EAA4B;AAE7B,WAAOA,iBAAiB,GAACJ,SAAS,EAAlC;AACH,GAHI,MAID;AAEA,WAAOI,iBAAP;AACH;AAGJ,CAvCM,C,CAyCP;;AACA,OAAO,MAAMI,eAAe,GAAIC,UAAD,IAAgB;AAC3C,SAAOA,UAAU,CAACC,GAAX,CAAeC,GAAG,IAAI;AACzB;AACA,WAAO,CAACA,GAAG,CAAC,CAAD,CAAJ,EAAQA,GAAG,CAAC,CAAD,CAAX,CAAP,CAFyB,CAGzB;AACH,GAJM,CAAP;AAMH,CAPM,C,CASP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,IAAgB;AAC5C,SAAOA,WAAW,CAACH,GAAZ,CAAgBC,GAAG,IAAI;AAC1B,WAAOA,GAAG,CAAC,CAAD,CAAV,CAD0B,CAE3B;AACH,GAHO,CAAP;AAIH,CALM;AAQP,OAAO,MAAMG,aAAa,GAAG,CAAC;AAACC,EAAAA,iBAAD;AAAmBC,EAAAA,gBAAnB;AAAoCC,EAAAA;AAApC,CAAD,KAA6C;AACtE,QAAMC,sBAAsB,GAAGnB,UAAU,CAACoB,OAAX,CAAmBJ,iBAAnB,CAA/B;AACA,QAAMK,qBAAqB,GAAGrB,UAAU,CAACoB,OAAX,CAAmBH,gBAAnB,CAA9B;;AAEA,MAAGE,sBAAsB,KAAK,CAAC,CAA5B,IAAiCE,qBAAqB,IAAE,CAA3D,EAA6D;AACzD,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACH;;AAED,MAAGJ,GAAG,KAAI,IAAP,IAAeC,sBAAsB,IAAIE,qBAA5C,EAAkE;AAC9D,WAAO,MAAP;AACH;;AACD,MAAGH,GAAG,KAAI,IAAP,IAAeC,sBAAsB,GAAGE,qBAA3C,EAAiE;AAC7D,WAAO,KAAP;AACH;;AAED,MAAGH,GAAG,KAAI,MAAP,IAAiBC,sBAAsB,IAAIE,qBAA9C,EAAoE;AAChE,WAAO,MAAP;AACH;;AACD,MAAGH,GAAG,KAAI,MAAP,IAAiBC,sBAAsB,GAAGE,qBAA7C,EAAmE;AAC/D,WAAO,KAAP;AACH;AACJ,CArBM","sourcesContent":["const cardValues = [\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'ACE',\n    'JACK',\n    'QUEEN',\n    'KING'\n];\n\n//handle special cards\n\nconst handleAce = () =>{\n    const aceValue = prompt(\"Please enter your ace value from 1-11\", \"1\");\n    return aceValue;\n}\n\nexport const handleSpecial = (selectedCardValue,score,turn) => {\n    if(selectedCardValue=='4'){\n        // setCardState({\n        //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n        //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n        // })\n        //setTurn(!turn)\n        return 0\n    }\n    else if(selectedCardValue=='9'){\n        // setCardState({\n        //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n        //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n        // })\n       // setTurn(!turn)\n        return 0 \n    }\n    else if(selectedCardValue=='10'){\n        return selectedCardValue=-10\n    }\n    else if(selectedCardValue=='KING'){\n         return selectedCardValue=99-Number(score)\n    }\n    else if(selectedCardValue=='QUEEN'){\n        return selectedCardValue=12\n    }\n    else if(selectedCardValue=='JACK'){\n        return selectedCardValue=11\n    }\n    else if(selectedCardValue=='ACE'){\n        \n        return selectedCardValue=handleAce();\n    }\n    else{\n        \n        return selectedCardValue\n    }\n\n   \n}\n\n//convert object to array of values\nexport const cardsObjToArray = (cardsArray) => {\n    return cardsArray.map(obj => {\n        //console.log(obj[0])\n        return [obj[0],obj[1]]\n        //return obj.value\n    })\n   \n}\n\n//convert object to array of images\nexport const imagesObjToArray = (imagesArray) =>{\n    return imagesArray.map(obj => {\n        return obj[2]\n       // return obj.image\n   })\n}\n  \n\nexport const compareValues = ({previousCardValue,currentCardValue,bet}) =>{\n    const previousCardValueIndex = cardValues.indexOf(previousCardValue)\n    const currentCardValueIndex = cardValues.indexOf(currentCardValue)\n\n    if(previousCardValueIndex === -1 || currentCardValueIndex==1){\n        throw new Error('Not found')\n    }\n\n    if(bet ===\"up\" && previousCardValueIndex >= currentCardValueIndex){\n        return \"lose\"\n    }\n    if(bet ===\"up\" && previousCardValueIndex < currentCardValueIndex){\n        return \"win\"\n    }\n\n    if(bet ===\"down\" && previousCardValueIndex <= currentCardValueIndex){\n        return \"lose\"\n    }\n    if(bet ===\"down\" && previousCardValueIndex > currentCardValueIndex){\n        return \"win\"\n    }\n}"]},"metadata":{},"sourceType":"module"}