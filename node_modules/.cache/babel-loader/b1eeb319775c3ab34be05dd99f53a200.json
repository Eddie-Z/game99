{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { cardsObjToArray, imagesObjToArray, handleSpecial } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, drawFromDeck_2 } from './api';\nexport const useBoardGame = () => {\n  //states\n  //player1\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  }); //AI\n\n  const [{\n    AIcardImageUrl,\n    AIcardInHand\n  }, AIsetCardState] = useState({\n    AIcardInHand: null,\n    AIcardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true);\n  const [winner, setWinner] = useState(); //handle ace \n\n  const [ace, setAce] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      //draw 5 cards\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw();\n      console.log(cardsArray); //draw 5 cards for AI\n\n      const {\n        cardsArray: AIcardsArray\n      } = await drawFromDeck_2(deckId); //convert object to array of values\n\n      const cards = cardsObjToArray(cardsArray);\n      const images = imagesObjToArray(cardsArray); //AI convert object to array of values\n\n      const AIcards = cardsObjToArray(AIcardsArray);\n      const AIimages = cardsObjToArray(AIcardsArray);\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      });\n      AIsetCardState({\n        AIcardInHand: AIcards,\n        AIcardImageUrl: AIimages\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []); // const update = (selectedCardValue,srcImgCard) =>{\n  //     setCardState({\n  //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n  //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n  //     })\n  // }\n\n  const onCardClick = event => {\n    event.preventDefault();\n\n    if (turn) {\n      let srcImgCard = event.target.src;\n      let pos = cardImageUrl.indexOf(srcImgCard);\n      let initialSelectedCardValue = cardInHand[pos];\n      console.log(cardInHand);\n      console.log(cardImageUrl);\n      console.log(\"you've selected \", initialSelectedCardValue);\n      let selectedCardValue = handleSpecial(initialSelectedCardValue[0], score, turn);\n      console.log(\"actual value is \", selectedCardValue); // let updatedScore = Number(score)+Number(selectedCardValue)\n      // if (updatedScore > 99){\n      //    alert(\"Winner Player 1 Refresh Game\")\n      // }\n      //update score\n      //setScore(updatedScore)\n\n      setScore(prevState => {\n        let newState = prevState + Number(selectedCardValue);\n        return newState;\n      }); //remove card from objects\n\n      setCardState(prevState => {\n        let newState = { ...prevState\n        }; // console.log(newState.cardInHand.splice(pos,1))\n        //console.log(newState.cardInHand)\n        //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n\n        newState.cardInHand = newState.cardInHand.filter(item => {\n          item[0] != initialSelectedCardValue && item[2] != initialSelectedCardValue[2];\n        });\n        newState.cardImageUrl = newState.cardImageUrl.filter(item => item != srcImgCard);\n        console.log(newState);\n        return newState;\n      });\n      console.log(cardInHand);\n      console.log(cardImageUrl); // setCardState({\n      //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n      //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n      // })\n      //change turn\n      //  setTurn(!turn)\n    }\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //cardImageUrl_2,\n    //onButtonClick,\n    onCardClick,\n    turn,\n    winner\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","cardsObjToArray","imagesObjToArray","handleSpecial","createDeckAndDraw","drawCardFromDeck","drawFromDeck_2","useBoardGame","cardImageUrl","cardInHand","setCardState","AIcardImageUrl","AIcardInHand","AIsetCardState","deckId","setDeckId","score","setScore","turn","setTurn","winner","setWinner","ace","setAce","fetchCardandDeck","cardsArray","console","log","AIcardsArray","cards","images","AIcards","AIimages","onCardClick","event","preventDefault","srcImgCard","target","src","pos","indexOf","initialSelectedCardValue","selectedCardValue","prevState","newState","Number","filter","item"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { cardsObjToArray, imagesObjToArray, handleSpecial} from './utils'\nimport {createDeckAndDraw, drawCardFromDeck,drawFromDeck_2} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    //player1\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n     //AI\n    const [{AIcardImageUrl,AIcardInHand}, AIsetCardState] = useState({\n        AIcardInHand:null,\n        AIcardImageUrl:null\n    })\n\n    const [deckId, setDeckId]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n    const [winner,setWinner]=useState()\n\n    //handle ace \n    const [ace,setAce]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n\n            //draw 5 cards\n            const {deckId,cardsArray} = await createDeckAndDraw();\n            console.log(cardsArray)\n\n            //draw 5 cards for AI\n            const {cardsArray:AIcardsArray} = await drawFromDeck_2(deckId);\n         \n               //convert object to array of values\n             const cards =  cardsObjToArray(cardsArray)\n             const images = imagesObjToArray(cardsArray)\n\n             //AI convert object to array of values\n             const AIcards =  cardsObjToArray(AIcardsArray)\n             const AIimages =  cardsObjToArray(AIcardsArray)\n\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            AIsetCardState({\n                AIcardInHand:AIcards,\n                AIcardImageUrl:AIimages\n            })\n    \n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n \n    // const update = (selectedCardValue,srcImgCard) =>{\n    //     setCardState({\n    //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n    //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n    //     })\n    // }\n\n    const onCardClick = (event) => {\n        event.preventDefault();\n        if(turn)\n        {\n            let srcImgCard = event.target.src\n            let pos = cardImageUrl.indexOf(srcImgCard)\n            let initialSelectedCardValue = cardInHand[pos]\n    \n            console.log(cardInHand)\n            console.log(cardImageUrl)\n            console.log(\"you've selected \",initialSelectedCardValue)\n\n            let selectedCardValue = handleSpecial(initialSelectedCardValue[0],score,turn)\n            console.log(\"actual value is \",selectedCardValue)\n\n          \n           // let updatedScore = Number(score)+Number(selectedCardValue)\n    \n            // if (updatedScore > 99){\n            //    alert(\"Winner Player 1 Refresh Game\")\n            // }\n                //update score\n            //setScore(updatedScore)\n\n            setScore(prevState => {\n                let newState = prevState + Number(selectedCardValue)\n                return newState;\n            })\n\n            //remove card from objects\n\n\n            setCardState(prevState => {\n                let newState = {...prevState}\n               // console.log(newState.cardInHand.splice(pos,1))\n                //console.log(newState.cardInHand)\n                //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n                newState.cardInHand=newState.cardInHand.filter(item => {item[0]!=initialSelectedCardValue && item[2]!=initialSelectedCardValue[2]})\n                newState.cardImageUrl=newState.cardImageUrl.filter(item => item!=srcImgCard)\n                console.log(newState)\n                return newState\n            }\n            )\n            console.log(cardInHand)\n            console.log(cardImageUrl)\n            \n            // setCardState({\n            //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n            //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            // })\n            //change turn\n          //  setTurn(!turn)\n        }\n    }\n    \n\n    return {\n        score,\n        cardImageUrl,\n        //cardImageUrl_2,\n        //onButtonClick,\n        onCardClick,\n        turn,\n        winner,\n    }\n}"]},"metadata":{},"sourceType":"module"}