{"ast":null,"code":"const cardValues = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'ACE', 'JACK', 'QUEEN', 'KING']; //handle special cards\n\nexport const handleSpecial = selectedCardValue => {\n  if (selectedCardValue == '4') {\n    setCardState({\n      cardInHand: cardInHand.filter(item => item != selectedCardValue),\n      cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n    }); //setTurn(!turn)\n\n    return;\n  } else if (selectedCardValue == '9') {\n    setCardState({\n      cardInHand: cardInHand.filter(item => item != selectedCardValue),\n      cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n    }); // setTurn(!turn)\n\n    return;\n  } else if (selectedCardValue == '10') {\n    selectedCardValue = -10;\n  } else if (selectedCardValue == 'KING') {\n    selectedCardValue = 99 - Number(score);\n  } else if (selectedCardValue == 'QUEEN') {\n    selectedCardValue = 12;\n  } else if (selectedCardValue == 'JACK') {\n    selectedCardValue = 11;\n  } else if (selectedCardValue == 'ACE') {\n    selectedCardValue = handleAce();\n  }\n\n  let updatedScore = Number(score) + Number(selectedCardValue);\n\n  if (updatedScore > 99) {\n    alert(\"Winner Player 1 Refresh Game\");\n  }\n}; //convert object to array of values\n\nexport const cardsObjToArray = cardsArray => {\n  return cardsArray.map(obj => {\n    return obj.value;\n  });\n}; //convert object to array of images\n\nexport const imagesObjToArray = imagesArray => {\n  return imagesArray.map(obj => {\n    return obj.image;\n  });\n};\nexport const compareValues = ({\n  previousCardValue,\n  currentCardValue,\n  bet\n}) => {\n  const previousCardValueIndex = cardValues.indexOf(previousCardValue);\n  const currentCardValueIndex = cardValues.indexOf(currentCardValue);\n\n  if (previousCardValueIndex === -1 || currentCardValueIndex == 1) {\n    throw new Error('Not found');\n  }\n\n  if (bet === \"up\" && previousCardValueIndex >= currentCardValueIndex) {\n    return \"lose\";\n  }\n\n  if (bet === \"up\" && previousCardValueIndex < currentCardValueIndex) {\n    return \"win\";\n  }\n\n  if (bet === \"down\" && previousCardValueIndex <= currentCardValueIndex) {\n    return \"lose\";\n  }\n\n  if (bet === \"down\" && previousCardValueIndex > currentCardValueIndex) {\n    return \"win\";\n  }\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/utils.js"],"names":["cardValues","handleSpecial","selectedCardValue","setCardState","cardInHand","filter","item","cardImageUrl","srcImgCard","Number","score","handleAce","updatedScore","alert","cardsObjToArray","cardsArray","map","obj","value","imagesObjToArray","imagesArray","image","compareValues","previousCardValue","currentCardValue","bet","previousCardValueIndex","indexOf","currentCardValueIndex","Error"],"mappings":"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","sourcesContent":["const cardValues = [\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'ACE',\n    'JACK',\n    'QUEEN',\n    'KING'\n];\n\n//handle special cards\n\nexport const handleSpecial = (selectedCardValue) => {\n    if(selectedCardValue=='4'){\n        setCardState({\n            cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n            cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n        })\n        //setTurn(!turn)\n        return\n    }\n    else if(selectedCardValue=='9'){\n        setCardState({\n            cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n            cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n        })\n       // setTurn(!turn)\n        return\n    }\n    else if(selectedCardValue=='10'){\n        selectedCardValue=-10\n    }\n    else if(selectedCardValue=='KING'){\n         selectedCardValue=99-Number(score)\n    }\n    else if(selectedCardValue=='QUEEN'){\n        selectedCardValue=12\n    }\n    else if(selectedCardValue=='JACK'){\n        selectedCardValue=11\n    }\n    else if(selectedCardValue=='ACE'){\n\n        selectedCardValue=handleAce();\n    }\n\n    let updatedScore = Number(score)+Number(selectedCardValue)\n    \n    if (updatedScore > 99){\n       alert(\"Winner Player 1 Refresh Game\")\n    }\n\n}\n\n//convert object to array of values\nexport const cardsObjToArray = (cardsArray) => {\n    return cardsArray.map(obj => {\n        return obj.value\n    })\n   \n}\n\n//convert object to array of images\nexport const imagesObjToArray = (imagesArray) =>{\n    return imagesArray.map(obj => {\n        return obj.image\n   })\n}\n  \n\nexport const compareValues = ({previousCardValue,currentCardValue,bet}) =>{\n    const previousCardValueIndex = cardValues.indexOf(previousCardValue)\n    const currentCardValueIndex = cardValues.indexOf(currentCardValue)\n\n    if(previousCardValueIndex === -1 || currentCardValueIndex==1){\n        throw new Error('Not found')\n    }\n\n    if(bet ===\"up\" && previousCardValueIndex >= currentCardValueIndex){\n        return \"lose\"\n    }\n    if(bet ===\"up\" && previousCardValueIndex < currentCardValueIndex){\n        return \"win\"\n    }\n\n    if(bet ===\"down\" && previousCardValueIndex <= currentCardValueIndex){\n        return \"lose\"\n    }\n    if(bet ===\"down\" && previousCardValueIndex > currentCardValueIndex){\n        return \"win\"\n    }\n}"]},"metadata":{},"sourceType":"module"}