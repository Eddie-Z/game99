{"ast":null,"code":"var _jsxFileName = \"/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/GameBoard.js\";\nimport React, { useEffect, useState } from 'react';\nimport { createDeckAndDraw, drawCardFromDeck } from './api';\nimport { CardLayout } from './Layout.component';\nimport { ButtonsTab } from './ButtonsTab';\nimport { compareValues } from './utils';\nexport const GameBoard = () => {\n  //states\n  const [{\n    cardImageUrl,\n    cardValue\n  }, setCardState] = useState({\n    cardValue: null,\n    cardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [result, setResult] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      const {\n        deckId,\n        value,\n        image\n      } = await createDeckAndDraw();\n      setCardState({\n        cardValue: value,\n        cardImageUrl: image\n      });\n    };\n\n    setDeckId(deckId);\n    fetchCardandDeck();\n  }, []);\n\n  const onButtonClick = async event => {\n    const bet = event.target.name;\n    const {\n      value,\n      image\n    } = await drawCardFromDeck(deckId);\n    debugger;\n    const result = compareValues({\n      previousCardValue: cardValue,\n      currentCardValue: value,\n      bet\n    });\n    setCardState({\n      cardImageUrl: image,\n      cardValue: value\n    });\n    setResult(result);\n  };\n\n  if (!cardImageUrl) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    }, \"loading\");\n  }\n\n  return /*#__PURE__*/React.createElement(CardLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: cardImageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsTab, {\n    onButtonClick: onButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), result && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }, result));\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/GameBoard.js"],"names":["React","useEffect","useState","createDeckAndDraw","drawCardFromDeck","CardLayout","ButtonsTab","compareValues","GameBoard","cardImageUrl","cardValue","setCardState","deckId","setDeckId","result","setResult","fetchCardandDeck","value","image","onButtonClick","event","bet","target","name","previousCardValue","currentCardValue"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,OAAlD;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,SAA9B;AAMA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE3B;AACA,QAAM,CAAC;AAACC,IAAAA,YAAD;AAAcC,IAAAA;AAAd,GAAD,EAA2BC,YAA3B,IAA2CT,QAAQ,CAAC;AACtDQ,IAAAA,SAAS,EAAC,IAD4C;AAEtDD,IAAAA,YAAY,EAAC;AAFyC,GAAD,CAAzD;AAIA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,MAAD,EAAQC,SAAR,IAAmBb,QAAQ,CAAC,IAAD,CAAjC,CAR2B,CAU3B;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,gBAAgB,GAAG,YAAW;AAChC,YAAM;AAACJ,QAAAA,MAAD;AAASK,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,UAAyB,MAAMf,iBAAiB,EAAtD;AACAQ,MAAAA,YAAY,CAAC;AACTD,QAAAA,SAAS,EAACO,KADD;AAETR,QAAAA,YAAY,EAACS;AAFJ,OAAD,CAAZ;AAIH,KAND;;AAQAL,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAI,IAAAA,gBAAgB;AACnB,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMG,aAAa,GAAG,MAAOC,KAAP,IAAgB;AAClC,UAAMC,GAAG,GAACD,KAAK,CAACE,MAAN,CAAaC,IAAvB;AACA,UAAM;AAACN,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAgB,MAAMd,gBAAgB,CAACQ,MAAD,CAA5C;AACA;AAEA,UAAME,MAAM,GAAGP,aAAa,CAAC;AACzBiB,MAAAA,iBAAiB,EAAEd,SADM;AAEzBe,MAAAA,gBAAgB,EAAER,KAFO;AAGzBI,MAAAA;AAHyB,KAAD,CAA5B;AAMAV,IAAAA,YAAY,CAAC;AACTF,MAAAA,YAAY,EAACS,KADJ;AAETR,MAAAA,SAAS,EAACO;AAFD,KAAD,CAAZ;AAKAF,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GAjBD;;AAmBA,MAAG,CAACL,YAAJ,EAAiB;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACH;;AAED,sBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAEA,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,UAAD;AAAY,IAAA,aAAa,EAAEU,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKL,MAAM,iBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,MAAL,CAHd,CADJ;AAOH,CAtDM","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport {createDeckAndDraw, drawCardFromDeck} from './api'\nimport {CardLayout} from './Layout.component'\nimport { ButtonsTab } from './ButtonsTab'\nimport { compareValues } from './utils'\n\n\n\n\n\nexport const GameBoard = () => {\n\n    //states\n    const [{cardImageUrl,cardValue}, setCardState] = useState({\n        cardValue:null,\n        cardImageUrl:null\n    })\n    const [deckId, setDeckId]=useState(null)\n    const [result,setResult]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n            const {deckId, value, image} = await createDeckAndDraw();\n            setCardState({\n                cardValue:value,\n                cardImageUrl:image\n            })\n        }\n       \n        setDeckId(deckId);\n        fetchCardandDeck();\n    },[])\n\n    const onButtonClick = async (event) =>{\n        const bet=event.target.name\n        const {value,image} = await drawCardFromDeck(deckId);\n        debugger;\n        \n        const result = compareValues({\n            previousCardValue: cardValue,\n            currentCardValue: value,\n            bet\n        })\n \n        setCardState({\n            cardImageUrl:image,\n            cardValue:value\n        })\n        \n        setResult(result)\n    }\n\n    if(!cardImageUrl){\n        return <h1>loading</h1>\n    }\n\n    return (\n        <CardLayout>\n            <img src={cardImageUrl}></img>\n            <ButtonsTab onButtonClick={onButtonClick}/>\n            {result &&<h2>{result}</h2>}\n        </CardLayout>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}