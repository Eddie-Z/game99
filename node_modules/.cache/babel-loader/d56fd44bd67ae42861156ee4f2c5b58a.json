{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { cardsObjToArray, imagesObjToArray, handleSpecial } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, AIDrawCards } from './api';\nexport const useBoardGame = () => {\n  //states\n  //player1\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  }); //AI\n\n  const [{\n    AIcardImageUrl,\n    AIcardInHand\n  }, AIsetCardState] = useState({\n    AIcardInHand: null,\n    AIcardImageUrl: null\n  });\n  const [deckId, setDeckId] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true);\n  const [winner, setWinner] = useState(); //handle ace \n\n  const [ace, setAce] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    //AI turn\n    if (!turn) {\n      console.log(\"Change Turns\"); //select first card\n\n      let initialSelectedCardValue = cardInHand[0];\n      setTurn(!turn);\n    }\n  }, [turn]);\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      //draw 5 cards\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw(); //draw 5 cards for AI\n\n      const {\n        cardsArray: AIcardsArray\n      } = await AIDrawCards(deckId); //convert object to array of values\n\n      const cards = cardsObjToArray(cardsArray);\n      const images = imagesObjToArray(cardsArray); //AI convert object to array of values\n\n      const AIcards = cardsObjToArray(AIcardsArray);\n      const AIimages = imagesObjToArray(AIcardsArray);\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      });\n      AIsetCardState({\n        AIcardInHand: AIcards,\n        AIcardImageUrl: AIimages\n      });\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []); // const update = (selectedCardValue,srcImgCard) =>{\n  //     setCardState({\n  //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n  //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n  //     })\n  // }\n\n  const onCardClick = event => {\n    event.preventDefault();\n\n    if (turn) {\n      let srcImgCard = event.target.src;\n      let pos = cardImageUrl.indexOf(srcImgCard);\n      let initialSelectedCardValue = cardInHand[pos];\n      console.log(cardInHand);\n      console.log(cardImageUrl);\n      console.log(\"you've selected \", initialSelectedCardValue);\n      let selectedCardValue = handleSpecial(initialSelectedCardValue[0], score, turn);\n      console.log(\"actual value is \", selectedCardValue);\n      setScore(prevState => {\n        let newState = prevState + Number(selectedCardValue);\n\n        if (newState > 99) {\n          alert(\"Other player has won! Restart browser\");\n        }\n\n        return newState;\n      }); //remove card from objects\n\n      setCardState(prevState => {\n        let newState = { ...prevState\n        }; // console.log(newState.cardInHand.splice(pos,1))\n        //console.log(newState.cardInHand)\n        //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n\n        newState.cardInHand = newState.cardInHand.filter(item => item[0] != initialSelectedCardValue && item[2] != initialSelectedCardValue[2]);\n        newState.cardImageUrl = newState.cardImageUrl.filter(item => item != srcImgCard);\n        console.log(newState);\n        return newState;\n      }); // setCardState({\n      //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n      //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n      // })\n      //change turn\n\n      setTurn(!turn);\n    }\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //cardImageUrl_2,\n    //onButtonClick,\n    onCardClick,\n    turn,\n    winner\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","cardsObjToArray","imagesObjToArray","handleSpecial","createDeckAndDraw","drawCardFromDeck","AIDrawCards","useBoardGame","cardImageUrl","cardInHand","setCardState","AIcardImageUrl","AIcardInHand","AIsetCardState","deckId","setDeckId","score","setScore","turn","setTurn","winner","setWinner","ace","setAce","console","log","initialSelectedCardValue","fetchCardandDeck","cardsArray","AIcardsArray","cards","images","AIcards","AIimages","onCardClick","event","preventDefault","srcImgCard","target","src","pos","indexOf","selectedCardValue","prevState","newState","Number","alert","filter","item"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { cardsObjToArray, imagesObjToArray, handleSpecial} from './utils'\nimport {createDeckAndDraw, drawCardFromDeck,AIDrawCards} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    //player1\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n     //AI\n    const [{AIcardImageUrl,AIcardInHand}, AIsetCardState] = useState({\n        AIcardInHand:null,\n        AIcardImageUrl:null\n    })\n\n    const [deckId, setDeckId]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n    const [winner,setWinner]=useState()\n\n    //handle ace \n    const [ace,setAce]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n\n    useEffect(()=>{\n\n        //AI turn\n        if(!turn){\n            console.log(\"Change Turns\")\n            //select first card\n            let initialSelectedCardValue = cardInHand[0]\n\n            setTurn(!turn)\n        }\n        \n    },[turn])\n\n\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n\n            //draw 5 cards\n            const {deckId,cardsArray} = await createDeckAndDraw();\n\n            //draw 5 cards for AI\n            const {cardsArray:AIcardsArray} = await AIDrawCards(deckId);\n         \n               //convert object to array of values\n             const cards =  cardsObjToArray(cardsArray)\n             const images = imagesObjToArray(cardsArray)\n\n\n             //AI convert object to array of values\n             const AIcards =  cardsObjToArray(AIcardsArray)\n             const AIimages =  imagesObjToArray(AIcardsArray)\n\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            AIsetCardState({\n                AIcardInHand:AIcards,\n                AIcardImageUrl:AIimages\n            })\n    \n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n \n    // const update = (selectedCardValue,srcImgCard) =>{\n    //     setCardState({\n    //         cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n    //         cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n    //     })\n    // }\n\n    const onCardClick = (event) => {\n        event.preventDefault();\n        if(turn)\n        {\n            let srcImgCard = event.target.src\n            let pos = cardImageUrl.indexOf(srcImgCard)\n            let initialSelectedCardValue = cardInHand[pos]\n    \n            console.log(cardInHand)\n            console.log(cardImageUrl)\n            console.log(\"you've selected \",initialSelectedCardValue)\n\n            let selectedCardValue = handleSpecial(initialSelectedCardValue[0],score,turn)\n            console.log(\"actual value is \",selectedCardValue)\n\n\n            setScore(prevState => {\n                let newState = prevState + Number(selectedCardValue)\n                if(newState>99){\n                    alert(\"Other player has won! Restart browser\")\n                }\n                return newState;\n            })\n        \n\n            //remove card from objects\n\n            setCardState(prevState => {\n                let newState = {...prevState}\n               // console.log(newState.cardInHand.splice(pos,1))\n                //console.log(newState.cardInHand)\n                //cardInHand=newState.cardInHand.filter(item => { return console.log(item)})\n                newState.cardInHand=newState.cardInHand.filter(item => item[0]!=initialSelectedCardValue && item[2]!=initialSelectedCardValue[2])\n                newState.cardImageUrl=newState.cardImageUrl.filter(item => item!=srcImgCard)\n                console.log(newState)\n                return newState\n            }\n            )\n\n            \n            // setCardState({\n            //     cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n            //     cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            // })\n            //change turn\n            setTurn(!turn)\n        }\n    }\n    \n\n    return {\n        score,\n        cardImageUrl,\n        //cardImageUrl_2,\n        //onButtonClick,\n        onCardClick,\n        turn,\n        winner,\n    }\n}"]},"metadata":{},"sourceType":"module"}