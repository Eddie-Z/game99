{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { compareValues } from './utils';\nimport { createDeckAndDraw, drawCardFromDeck, drawFromDeck_2 } from './api';\nexport const useBoardGame = () => {\n  //states\n  //player1\n  const [{\n    cardImageUrl,\n    cardInHand\n  }, setCardState] = useState({\n    cardInHand: null,\n    cardImageUrl: null\n  }); // //player2\n  // const [{cardImageUrl_2,cardInHand_2}, setCardState_2] = useState({\n  //     cardInHand_2:null,\n  //     cardImageUrl_2:null\n  // })\n\n  const [deckId, setDeckId] = useState(null);\n  const [score, setScore] = useState(null); //turn\n\n  const [turn, setTurn] = useState(true);\n  const [winner, setWinner] = useState(); //handle ace \n\n  const [ace, setAce] = useState(null); //use effect sychonrous to prevent race conditions\n\n  useEffect(() => {\n    const fetchCardandDeck = async () => {\n      const {\n        deckId,\n        cardsArray\n      } = await createDeckAndDraw(); // const {cardsArray:cardsArray2} = await drawFromDeck_2(deckId);\n      //convert object to array of values\n\n      const cards = cardsArray.map(obj => {\n        return obj.value;\n      }); //convert object to array of images\n\n      const images = cardsArray.map(obj => {\n        return obj.image;\n      }); //     const cards2 = cardsArray2.map(obj => {\n      //         return obj.value\n      //     })\n      //     //convert object to array of images\n      //     const images2 = cardsArray2.map(obj => {\n      //        return obj.image\n      //    })\n\n      setCardState({\n        cardInHand: cards,\n        cardImageUrl: images\n      }); // setCardState_2({\n      //     cardInHand_2:cards2,\n      //     cardImageUrl_2:images2\n      // })\n\n      setDeckId(deckId);\n    };\n\n    fetchCardandDeck();\n  }, []);\n  useEffect(() => {\n    const fetchNewCard = async () => {\n      const {\n        value,\n        image\n      } = await drawCardFromDeck(deckId);\n      setCardState({\n        cardInHand: [...cardInHand, value],\n        cardImageUrl: [...cardImageUrl, image]\n      });\n    }; // const fetchNewCard2 = async () =>{\n    //     const {value,image} = await drawCardFromDeck(deckId);\n    //     setCardState_2({\n    //         cardInHand_2:[...cardInHand,value],\n    //         cardImageUrl_2:[...cardImageUrl,image]\n    //     })\n    // }\n\n\n    if (turn) {\n      fetchNewCard();\n    } // else{\n    //     fetchNewCard2();\n    // }\n\n  }, [turn]);\n\n  const handleAce = () => {\n    const aceValue = prompt(\"Please enter your ace value from 1-11\", \"1\");\n    return aceValue;\n  };\n\n  const onCardClick = event => {\n    if (turn) {\n      let srcImgCard = event.target.src;\n      let pos = cardImageUrl.indexOf(srcImgCard);\n      let selectedCardValue = cardInHand[pos];\n\n      if (selectedCardValue == '4') {\n        setCardState({\n          cardInHand: cardInHand.filter(item => item != selectedCardValue),\n          cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n        });\n        setTurn(!turn);\n        return;\n      } else if (selectedCardValue == '9') {\n        setCardState({\n          cardInHand: cardInHand.filter(item => item != selectedCardValue),\n          cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n        });\n        setTurn(!turn);\n        return;\n      } else if (selectedCardValue == '10') {\n        selectedCardValue = -10;\n      } else if (selectedCardValue == 'KING') {\n        selectedCardValue = 99 - Number(score);\n      } else if (selectedCardValue == 'QUEEN') {\n        selectedCardValue = 12;\n      } else if (selectedCardValue == 'JACK') {\n        selectedCardValue = 11;\n      } else if (selectedCardValue == 'ACE') {\n        selectedCardValue = handleAce();\n      }\n\n      let updatedScore = Number(score) + Number(selectedCardValue);\n\n      if (updatedScore > 99) {\n        alert(\"Winner Player 1 Refresh Game\");\n      } //update score\n\n\n      setScore(updatedScore); //remove card from objects\n\n      setCardState({\n        cardInHand: cardInHand.filter(item => item != selectedCardValue),\n        cardImageUrl: cardImageUrl.filter(item => item != srcImgCard)\n      }); //change turn\n\n      setTurn(!turn);\n    } //player 2 turn\n    // else{\n    //     let srcImgCard = event.target.src\n    //     let pos = cardImageUrl_2.indexOf(srcImgCard)\n    //     let selectedCardValue = cardInHand_2[pos]\n    //     if(selectedCardValue=='4'){\n    //         setCardState_2({\n    //             cardInHand:cardInHand_2.filter(item => item!=selectedCardValue),\n    //             cardImageUrl:cardImageUrl_2.filter(item => item!=srcImgCard)\n    //         })\n    //         setTurn(!turn)\n    //         return\n    //     }\n    //     else if(selectedCardValue=='9'){\n    //         setCardState_2({\n    //             cardInHand:cardInHand_2.filter(item => item!=selectedCardValue),\n    //             cardImageUrl:cardImageUrl_2.filter(item => item!=srcImgCard)\n    //         })\n    //         setTurn(!turn)\n    //         return\n    //     }\n    //     else if(selectedCardValue=='10'){\n    //         selectedCardValue=-10\n    //     }\n    //     else if(selectedCardValue=='KING'){\n    //          selectedCardValue=99-Number(score)\n    //     }\n    //     else if(selectedCardValue=='QUEEN'){\n    //         selectedCardValue=12\n    //     }\n    //     else if(selectedCardValue=='JACK'){\n    //         selectedCardValue=11\n    //     }\n    //     else if(selectedCardValue=='ACE'){  \n    //         selectedCardValue=handleAce();\n    //     }\n    //     let updatedScore = Number(score)+Number(selectedCardValue)\n    //     debugger\n    //     if (updatedScore > 99){\n    //         alert(\"Winner player 2! Refresh Game\")\n    //     }\n    //     setScore(updatedScore)\n    //     //remove card from objects\n    //     setCardState_2({\n    //         cardInHand_2:cardInHand_2.filter(item => item!=selectedCardValue),\n    //         cardImageUrl_2:cardImageUrl_2.filter(item => item!=srcImgCard)\n    //     })\n    //     //change turn\n    //     setTurn(!turn)\n    // }\n\n  };\n\n  return {\n    score,\n    cardImageUrl,\n    //cardImageUrl_2,\n    //onButtonClick,\n    onCardClick,\n    turn,\n    winner\n  };\n};","map":{"version":3,"sources":["/Users/eddiezheng/Documents/GitHub/99/card/cardgame/src/cardGameBoard.state.js"],"names":["React","useEffect","useState","compareValues","createDeckAndDraw","drawCardFromDeck","drawFromDeck_2","useBoardGame","cardImageUrl","cardInHand","setCardState","deckId","setDeckId","score","setScore","turn","setTurn","winner","setWinner","ace","setAce","fetchCardandDeck","cardsArray","cards","map","obj","value","images","image","fetchNewCard","handleAce","aceValue","prompt","onCardClick","event","srcImgCard","target","src","pos","indexOf","selectedCardValue","filter","item","Number","updatedScore","alert"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport { compareValues } from './utils'\nimport {createDeckAndDraw, drawCardFromDeck,drawFromDeck_2} from './api'\n\nexport const useBoardGame = () => {\n\n    //states\n    //player1\n    const [{cardImageUrl,cardInHand}, setCardState] = useState({\n        cardInHand:null,\n        cardImageUrl:null\n    })\n    // //player2\n    // const [{cardImageUrl_2,cardInHand_2}, setCardState_2] = useState({\n    //     cardInHand_2:null,\n    //     cardImageUrl_2:null\n    // })\n\n    const [deckId, setDeckId]=useState(null)\n    const [score,setScore]=useState(null)\n\n    //turn\n    const [turn,setTurn]=useState(true)\n    const [winner,setWinner]=useState()\n\n    //handle ace \n    const [ace,setAce]=useState(null)\n\n    //use effect sychonrous to prevent race conditions\n    useEffect(()=>{\n        const fetchCardandDeck = async () =>{\n            const {deckId,cardsArray} = await createDeckAndDraw();\n            // const {cardsArray:cardsArray2} = await drawFromDeck_2(deckId);\n            \n         \n               //convert object to array of values\n             const cards = cardsArray.map(obj => {\n                 return obj.value\n             })\n\n             //convert object to array of images\n             const images = cardsArray.map(obj => {\n                return obj.image\n            })\n        //     const cards2 = cardsArray2.map(obj => {\n        //         return obj.value\n        //     })\n\n        //     //convert object to array of images\n        //     const images2 = cardsArray2.map(obj => {\n        //        return obj.image\n        //    })\n            \n            setCardState({\n                cardInHand:cards,\n                cardImageUrl:images\n            })\n            // setCardState_2({\n            //     cardInHand_2:cards2,\n            //     cardImageUrl_2:images2\n            // })\n    \n            setDeckId(deckId);\n        }\n        fetchCardandDeck();\n    },[])\n\n    useEffect(()=>{\n\n            const fetchNewCard = async () =>{\n                const {value,image} = await drawCardFromDeck(deckId);\n                setCardState({\n                    cardInHand:[...cardInHand,value],\n                    cardImageUrl:[...cardImageUrl,image]\n                })\n              \n            }\n            // const fetchNewCard2 = async () =>{\n            //     const {value,image} = await drawCardFromDeck(deckId);\n            //     setCardState_2({\n            //         cardInHand_2:[...cardInHand,value],\n            //         cardImageUrl_2:[...cardImageUrl,image]\n            //     })\n              \n            // }\n            if(turn){\n                fetchNewCard();\n            }\n            // else{\n            //     fetchNewCard2();\n            // }\n            \n    },[turn])\n\n    const handleAce = () =>{\n        const aceValue = prompt(\"Please enter your ace value from 1-11\", \"1\");\n        return aceValue;\n        \n    }\n\n    const onCardClick = (event) => {\n        if(turn)\n        {\n            let srcImgCard = event.target.src\n            let pos = cardImageUrl.indexOf(srcImgCard)\n            let selectedCardValue = cardInHand[pos]\n            \n            if(selectedCardValue=='4'){\n                setCardState({\n                    cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n                    cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n                })\n                setTurn(!turn)\n                return\n            }\n            else if(selectedCardValue=='9'){\n                setCardState({\n                    cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n                    cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n                })\n                setTurn(!turn)\n                return\n            }\n            else if(selectedCardValue=='10'){\n                selectedCardValue=-10\n            }\n            else if(selectedCardValue=='KING'){\n                 selectedCardValue=99-Number(score)\n            }\n            else if(selectedCardValue=='QUEEN'){\n                selectedCardValue=12\n            }\n            else if(selectedCardValue=='JACK'){\n                selectedCardValue=11\n            }\n            else if(selectedCardValue=='ACE'){\n\n                selectedCardValue=handleAce();\n            }\n\n            let updatedScore = Number(score)+Number(selectedCardValue)\n            \n            if (updatedScore > 99){\n               alert(\"Winner Player 1 Refresh Game\")\n            }\n\n                //update score\n            setScore(updatedScore)\n\n            //remove card from objects\n            setCardState({\n                cardInHand:cardInHand.filter(item => item!=selectedCardValue),\n                cardImageUrl:cardImageUrl.filter(item => item!=srcImgCard)\n            })\n\n            //change turn\n            setTurn(!turn)\n        }\n        //player 2 turn\n        // else{\n        //     let srcImgCard = event.target.src\n        //     let pos = cardImageUrl_2.indexOf(srcImgCard)\n        //     let selectedCardValue = cardInHand_2[pos]\n        //     if(selectedCardValue=='4'){\n        //         setCardState_2({\n        //             cardInHand:cardInHand_2.filter(item => item!=selectedCardValue),\n        //             cardImageUrl:cardImageUrl_2.filter(item => item!=srcImgCard)\n        //         })\n        //         setTurn(!turn)\n        //         return\n        //     }\n        //     else if(selectedCardValue=='9'){\n        //         setCardState_2({\n        //             cardInHand:cardInHand_2.filter(item => item!=selectedCardValue),\n        //             cardImageUrl:cardImageUrl_2.filter(item => item!=srcImgCard)\n        //         })\n        //         setTurn(!turn)\n        //         return\n        //     }\n        //     else if(selectedCardValue=='10'){\n        //         selectedCardValue=-10\n        //     }\n        //     else if(selectedCardValue=='KING'){\n        //          selectedCardValue=99-Number(score)\n        //     }\n        //     else if(selectedCardValue=='QUEEN'){\n        //         selectedCardValue=12\n        //     }\n        //     else if(selectedCardValue=='JACK'){\n        //         selectedCardValue=11\n        //     }\n        //     else if(selectedCardValue=='ACE'){  \n\n        //         selectedCardValue=handleAce();\n        //     }\n\n    \n        //     let updatedScore = Number(score)+Number(selectedCardValue)\n        //     debugger\n        //     if (updatedScore > 99){\n        //         alert(\"Winner player 2! Refresh Game\")\n        //     }\n\n        //     setScore(updatedScore)\n\n        //     //remove card from objects\n        //     setCardState_2({\n        //         cardInHand_2:cardInHand_2.filter(item => item!=selectedCardValue),\n        //         cardImageUrl_2:cardImageUrl_2.filter(item => item!=srcImgCard)\n        //     })\n            \n        //     //change turn\n        //     setTurn(!turn)\n        // }\n      \n    }\n    \n\n    return {\n        score,\n        cardImageUrl,\n        //cardImageUrl_2,\n        //onButtonClick,\n        onCardClick,\n        turn,\n        winner,\n    }\n}"]},"metadata":{},"sourceType":"module"}